name: automatic_release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Automatic release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: Save release URL
        run: echo '${{ steps.create_release.outputs.upload_url }}' > release_url.txt          
      - name: Upload release URL
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt

  build_linux:
    runs-on: ubuntu-latest
    steps:
    - name: checkout local
      uses: actions/checkout@v2
    - name: checkout mm core
      uses: actions/checkout@v2
      with:
        repository: micro-manager/mmCoreAndDevices
        path: micro-manager
    - name: install comedilib
      run: sudo apt-get install libcomedi-dev
    - name: configure
      run: mkdir build && cd build && cmake .. -DMMROOT=micro-manager
    - name: build
      run: cd build && cmake --build .
    - name: rename library file
      run: cd build && mv libmmgr_dal_LaserDiodeDriver.so libmmgr_dal_LaserDiodeDriver.so.0
    - name: create tarball
      run: cd build && tar -czf libmmgr_dal_LaserDiodeDriver.tar.gz libmmgr_dal_LaserDiodeDriver.so.0 && ls
    - name: Download release URL
      uses: actions/download-artifact@v2
      with:
        name: release_url
    - name: Get release URL
      id: get-release-url
      run: echo ::set-output name=release_url::$(cat release_url.txt)
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get-release-url.outputs.release_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/libmmgr_dal_LaserDiodeDriver.tar.gz
        asset_name: libmmgr_dal_LaserDiodeDriver.tar.gz
        asset_content_type: application/gzip

  build_windows:
    runs-on: windows-latest
    steps:
    - name: checkout local
      uses: actions/checkout@v2
    - name: checkout mm core
      uses: actions/checkout@v2
      with:
        repository: micro-manager/mmCoreAndDevices
        path: micro-manager
    - name: configure
      run: mkdir build && cd build && cmake .. -DMMROOT=micro-manager
    - name: build
      run: cd build && cmake --build . --config Release
    - name: Create ZIP archive
      run: Compress-Archive build\Release\mmgr_dal_LaserDiodeDriver.dll libmmgr_dal_LaserDiodeDriver.zip
    - name: Download release URL
      uses: actions/download-artifact@v2
      with:
        name: release_url
    - name: Get release URL
      id: get-release-url
      run: |
          $file_text = Get-Content "release_url.txt"
          echo "::set-output name=release_url::$file_text"
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get-release-url.outputs.release_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: libmmgr_dal_LaserDiodeDriver.zip
        asset_name: libmmgr_dal_LaserDiodeDriver.zip
        asset_content_type: application/zip
